#include <iostream>
#include <vector>
using namespace std;
class Malware{
protected:
    float rating;
    string data;
    string nume;
    string infectare;  //unknown
    int nr_registrii;
    vector<string> registrii;
public:
    Malware(){
        this->infectare="unknown";
    }
    virtual ~Malware(){};
    friend istream &operator>>(istream &in, Malware& malware);
    friend ostream &operator<<(ostream &out, const Malware& malware);
};
istream &operator>>(istream &in, Malware& malware){
    cout<<"rating: \n";
    in>>malware.rating;
    cout<<"data: \n";
    in>>malware.data;
    cout<<"nume: \n";
    in>>malware.nume;
    cout<<"infectare: \n";
    in>>malware.infectare;
    cout<<"Nr registrii: \n";
    in>>malware.nr_registrii;
    cout<<"introdu registrii\n";
    for(int i=0; i<malware.nr_registrii; i++)
    {
        string aux;
        in>>aux;
        malware.registrii.push_back(aux);
    }
    return in;
}
ostream &operator<<(ostream &out, const Malware& malware){
    out<<malware.rating<<endl;
    out<<malware.data<<endl;
    out<<malware.nume<<endl;
    out<<malware.infectare<<endl;
    out<<malware.nr_registrii<<endl;
    for(int i=0; i<malware.nr_registrii; i++)
        out<<malware.registrii[i]<<endl;
    
    return out;
}
class Rootkit: virtual public Malware{
private:
    int nr_importuri;
    vector<string> importuri;
    int nr_semnificative;
    vector<string> semnificative;
public:
    Rootkit(){};
    ~Rootkit(){};
    friend istream &operator>> (istream &in, Rootkit& rootkit){
        in>>(Malware&) rootkit;
        cout<<"nr importuri";
        in>>rootkit.nr_importuri;
        cout<<"importurile";
        for(int i=0; i<rootkit.nr_importuri; i++)
        {
            string aux;
            in>>aux;
            rootkit.importuri.push_back(aux);
        }
        cout<<"nr semnificative";
        in>>rootkit.nr_semnificative;
        cout<<"semnificativele";
        for(int i=0; i<rootkit.nr_semnificative; i++)
        {
            string aux;
            in>>aux;
            rootkit.semnificative.push_back(aux);
        }
        return in;
    }
    friend ostream &operator<< (ostream &out, Rootkit& rootkit){
        out<<(Malware&) rootkit<<endl;
        for(int i=0; i<rootkit.nr_importuri; i++){
            out<<rootkit.importuri[i]<<endl;
        }
        for(int i=0; i<rootkit.nr_semnificative; i++){
            out<<rootkit.semnificative[i]<<endl;
        }
        return out;
    }
};
class Keylogger : virtual public Malware{
private:
    int nr_functii;
    vector<string> functii;
    int nr_taste;
    vector<string> taste;
public:
    Keylogger(){};
    ~Keylogger(){};
    vector<string> getFunctii() const{
        return functii;
    }
    vector<string> getTaste() const{
        return taste;
    }
    void setFunctii(vector<string> f){
        this->functii = f;
    }
    void setTaste(vector<string> t){
        this->taste = t;
    }
    friend istream &operator>> (istream &in, Keylogger& keylogger){
        in>>(Malware&) keylogger;
        in>>keylogger.nr_functii;
        for(int i=0; i<keylogger.nr_functii; i++)
        {
            string aux;
            in>>aux;
            keylogger.functii.push_back(aux);
        }
        in>>keylogger.nr_taste;
        for(int i=0; i<keylogger.nr_taste; i++)
        {
            string aux;
            in>>aux;
            keylogger.taste.push_back(aux);
        }
        return in;
    }
    friend ostream &operator<< (ostream &out, Keylogger& keylogger){
        out<<(Malware&) keylogger<<endl;
        for(int i=0; i<keylogger.nr_functii; i++){
            out<<keylogger.functii[i]<<endl;
        }
        for(int i=0; i<keylogger.nr_taste; i++){
            out<<keylogger.taste[i]<<endl;
        }
        return out;
    }
};
class Kernel_keylogger : public Rootkit, public Keylogger{
private:
    bool ascundefisiere;
    bool ascundereg;
public:
    Kernel_keylogger(){};
    ~Kernel_keylogger(){};
    friend istream &operator>> (istream &in, Kernel_keylogger& kernel_keylogger){
        in>>(Rootkit&) kernel_keylogger;
        in>>(Keylogger&) kernel_keylogger;
        in>>kernel_keylogger.ascundefisiere;
        in>>kernel_keylogger.ascundereg;
        
        return in;
    }
    friend ostream &operator<< (ostream &out,const Kernel_keylogger& kernel_keylogger){
        out<<(Malware&) kernel_keylogger<<endl;
        out<<(Rootkit&) kernel_keylogger<<endl;
        out<<kernel_keylogger.ascundefisiere<<endl;
        out<<kernel_keylogger.ascundereg<<endl;
        return out;
    }
};
class Computer{
private:
    static int id;
    vector<shared_ptr<Malware>> virusi;
    int rating;
public:
    Computer(){
        id++;
    }
    ~Computer(){};
    friend istream &operator>> (istream &in, Computer& computer){
        cout<<"introd nr virusi\n";
        int nr;
        in>>nr;
        for(int i=0; i<nr; i++)
        {
            cout<<"introd tipul de virus\n";
            cout<<"1. rootkit\n";
            cout<<"2. keylogger\n";
            cout<<"3. kernel keylogger\n";
            int optiune;
            in>>optiune;
            switch(optiune){
                case 1:
                {
                    shared_ptr<Rootkit> r;
                    r = make_shared<Rootkit>();
                    in>>*r;
                    computer.virusi.push_back(r);
                    break;
                }
                case 2:
                {
                    shared_ptr<Keylogger> k;
                    k = make_shared<Keylogger>();
                    in>>*k;
                    computer.virusi.push_back(k);
                    break;
                }
                case 3:
                {
                    shared_ptr<Kernel_keylogger> kk;
                    kk = make_shared<Kernel_keylogger>();
                    in>>*kk;
                    computer.virusi.push_back(kk);
                    break;
                }
            }
        }
        return in;
    }
    friend ostream &operator<< (ostream &out,const Computer& computer){
        out<<computer.id;
        for(const auto &virus: computer.virusi){
            out<<*virus<<endl;
        }
        return out;
    }
};
int Computer::id=0;
int main() {
    vector<shared_ptr<Computer>> computere;
    int optiune;
    cout<<"alege optiunea";
    cout<<"1. afiseaza computerele";
    cout<<"2. adauga computer";
    cin>>optiune;
    switch(optiune){
        case 1:
        {
            for(auto const &computer: computere){
                cout<<*computer<<endl;
            }
            break;
        }
        case 2:
        {
            shared_ptr<Computer> c;
            c = make_shared<Computer>();
            cin>>*c;
            computere.push_back(c);
            break;
        }
    }
    return 0;
}
